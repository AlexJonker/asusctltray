#!/usr/bin/env python3

# Copyright (c) Leonardo Baldin
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import os
import signal
import webbrowser
from typing import *

import dbus
import gi

gi.require_version("Gtk", "3.0")
gi.require_version("AppIndicator3", "0.1")

from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import AppIndicator3 as appindicator
from gi.repository import GLib, Gtk

ICON_BASE_PATH: str = "/usr/share/pixmaps"
# From https://gitlab.com/asus-linux/asusctl-gex/-/blob/main/src/modules/gfx_mode_dbus.ts
GFX_MODES: Dict[int, str] = {
    0: "hybrid",
    1: "nvidia",
    2: "integrated",
    3: "compute",
    4: "vfio",
    5: "egpu",
}

GFX_USER_ACTION: Dict[int, str] = {
    0: "logout",
    1: "reboot",
    2: "integrated",
    3: "none",
}

GFX_POWER: Dict[int, str] = {
    0: "active",
    1: "suspended",
    2: "off",
    3: "unknown",
}

BOOST_CONTROL: List[Dict[str, str]] = [
    {
        "path": "/sys/devices/system/cpu/intel_pstate/no_turbo",
        "on": "echo 0 | pkexec tee {path}",
        "off": "echo 1 | pkexec tee {path}",
    },
    {
        "path": "/sys/devices/system/cpu/cpufreq/boost",
        "on": "echo 1 | pkexec tee {path}",
        "off": "echo 0 | pkexec tee {path}",
    },
]


def on_widget_active_strict(callback) -> None:
    """Decorator to inject a check for widget activation, calls the function only when
    the widget is active"""

    def inner(self, widget: Gtk.MenuItem):
        # Return if the widget is not actually active
        if not widget.get_active():
            return
        callback(self, widget)

    return inner


class TrayIcon:
    """Contains the logic for a tray icon and manages profile/gfx switching"""

    gfx_proxy: dbus.Interface = None
    power_profile_props_proxy: dbus.Interface = None
    presets: List[str] = []

    # Holds a reference to the right boost control command (see globals) for this platform
    boost_ctrl: Dict[str, str] = None

    # Used to store original profile names for radio widgets
    raw_names: Dict[Gtk.RadioMenuItem, str] = {}

    # Holds a reference to the global loop running, to call loop.quit() when necessary
    loop: GLib.MainLoop = None
    # Holds the GTK Menu instance
    menu: Gtk.Menu = None
    # Holds the Indicator instance
    icon: appindicator.Indicator = None
    # Is set to True when Gtk needs to stop the main loop
    quitting: bool = False

    state: Dict[str, Any] = {}

    def __init__(self, loop: GLib.MainLoop) -> None:
        self.loop = loop

        bus = dbus.SystemBus()
        self.gfx_proxy = dbus.Interface(
            bus.get_object("org.supergfxctl.Daemon", "/org/supergfxctl/Gfx"),
            dbus_interface="org.supergfxctl.Daemon",
        )
        self.power_profile_props_proxy = dbus.Interface(
            bus.get_object("net.hadess.PowerProfiles", "/net/hadess/PowerProfiles"),
            dbus_interface=dbus.PROPERTIES_IFACE,
        )

        # TODO: asusctl profiles and ppd profiles are different
        self.presets = [
            str(p["Profile"])
            for p in self.power_profile_props_proxy.Get(
                "net.hadess.PowerProfiles", "Profiles"
            )
        ]

        for control in BOOST_CONTROL:
            if os.path.isfile(control["path"]):
                self.boost_ctrl = control

        self.update()

        self.icon = appindicator.Indicator.new(
            "asusctltray",
            Gtk.STOCK_INFO,
            appindicator.IndicatorCategory.SYSTEM_SERVICES,
        )
        self.icon.set_status(appindicator.IndicatorStatus.ACTIVE)
        self.build_menu()
        self.icon.set_menu(self.menu)
        self.icon.set_icon_theme_path(ICON_BASE_PATH)
        self.icon.set_icon_full("asusctltray", "")

    def build_menu(self) -> None:
        """Create and populate the main menu for the tray icon"""
        self.menu = Gtk.Menu()
        # self.menu = Gtk.Menu.new_from_model(Gio.Menu())

        self.add_graphics("Graphics")
        self.menu.append(Gtk.SeparatorMenuItem())
        self.add_presets("Power profiles")
        self.menu.append(Gtk.SeparatorMenuItem())
        if self.boost_ctrl:
            self.setup_boost_menu("Boost")
            self.menu.append(Gtk.SeparatorMenuItem())

        qicon = Gtk.MenuItem()
        qicon.set_label("Quit asusctltray")
        qicon.connect("activate", self._quit)
        self.menu.append(qicon)

        self.menu.show_all()

    def _quit(self, _) -> None:
        """Simple callback wrapper for GLib.MainLoop.quit()"""
        self.loop.quit()

    def _humanize(self, name: str) -> str:
        """Humanize profile name, e.g. 'power-saver' -> 'Power saver'"""
        return name.replace("-", " ").capitalize()

    def update(self) -> None:
        self.state["graphics"] = self.get_current_graphics()
        self.state["power"] = self.gfx_proxy.Power()
        self.state["profile"] = self.power_profile_props_proxy.Get(
            "net.hadess.PowerProfiles", "ActiveProfile"
        )
        self.build_menu()

    def add_presets(self, title: str) -> None:
        """Load power profiles and add a RadioMenuItem for each to the menu"""
        if len(self.presets) == 0:
            return

        titem = Gtk.MenuItem.new_with_label(title)
        titem.set_sensitive(False)
        self.menu.append(titem)

        self.power_profile_props_proxy.connect_to_signal(
            "PropertiesChanged", self.signal_preset_callback
        )

        group = []
        for preset in self.presets:
            pitem = Gtk.RadioMenuItem.new_with_label(
                group=group, label=self._humanize(preset)
            )
            self.raw_names[pitem] = preset
            pitem.set_active(preset == self.state["profile"])

            pitem.connect("activate", self.load_preset)
            group = pitem.get_group()
            self.menu.append(pitem)

    @on_widget_active_strict
    def load_preset(self, widget: Gtk.MenuItem) -> None:
        """Activate a power profile, called when a RadioMenuItem is activated"""
        # TODO: use signals when they're actually implemented by asusctl
        self.power_profile_props_proxy.Set(
            "net.hadess.PowerProfiles",
            "ActiveProfile",
            self.raw_names[widget],
        )

    def signal_preset_callback(self, iface_name, changed, _):
        self.state["profile"] = self.power_profile_props_proxy.Get(
            "net.hadess.PowerProfiles", "ActiveProfile"
        )

    def signal_graphics_callback(self, iface_name, changed, _):
        # self.state["graphics"] = self.power_profile_props_proxy.Get(
        #     "net.hadess.PowerProfiles", "ActiveProfile"
        # )
        # print(f"Profile updated: got {self.state['profile']}, changed: {changed}")
        # TODO: supergfxctl does not have a signal handler for gfx power change
        pass

    def add_graphics(self, title: str) -> None:
        """Load graphics modes and power status and add a RadioMenuItem for each to the menu"""
        titem = Gtk.MenuItem.new_with_label(title)
        titem.set_sensitive(False)
        self.menu.append(titem)

        power = GFX_POWER[self.state["power"]]
        pitem = Gtk.MenuItem.new_with_label(f"dGPU: {power}")
        self.menu.append(pitem)
        self.menu.append(Gtk.SeparatorMenuItem())

        # current_graphics = self.get_current_graphics()
        supported_modes = [int(m) for m in self.gfx_proxy.Supported()]

        group = []
        for mode_ind, mode in GFX_MODES.items():
            # Skip unsupported modes
            if not mode_ind in supported_modes:
                continue
            gitem = Gtk.RadioMenuItem.new_with_label(group=group, label=mode)
            group = gitem.get_group()
            gitem.set_active(mode_ind == self.state["graphics"])
            gitem.connect("activate", self.switch_graphics)
            self.menu.append(gitem)

    def get_current_graphics(self) -> int:
        """Returns the currently active graphics mode"""
        mode = self.gfx_proxy.Mode()
        if mode not in GFX_MODES.keys():
            dialog = self._build_dialog(
                "Unrecognized graphics mode with index "
                f"<span font_family='monospace'>{int(mode)}</span>.\n"
                "\nPlease open a new issue on Github with this bug report!"
            )
            dialog.add_buttons("Open Github issues page", Gtk.ResponseType.OK)
            resp = dialog.run()
            if resp == Gtk.ResponseType.OK:
                webbrowser.open_new_tab("https://github.com/Baldomo/asusctltray/issues")
            dialog.destroy()
            self._quit()
        return mode

    @on_widget_active_strict
    def switch_graphics(self, widget: Gtk.MenuItem) -> None:
        """Activate a graphics mode, called when a RadioMenuItem is activated"""

        # Return if the currently active profile is already selected in the menu
        if GFX_MODES[self.get_current_graphics()] == widget.get_label():
            return

        # Kinda horrible but it's fine because GFX_MODES is hardcoded
        # Gets the newly selected mode index from GFX_MODES
        mode_ind = next(
            (k for (k, v) in GFX_MODES.items() if v == widget.get_label()), None
        )
        if not mode_ind:
            # This shouldn't happen
            return

        action_ind = self.gfx_proxy.SetMode(mode_ind)
        action = GFX_USER_ACTION[action_ind]
        if action == "integrated":
            dialog = self._build_dialog(
                "You must switch to Integrated mode before switching to Compute or VFIO."
            )
            dialog.run()
            dialog.destroy()
        elif action != "none":
            dialog = self._build_dialog(
                f"Graphics changed to {widget.get_label()}. "
                f"A {action} is required (save your files!)."
            )
            dialog.add_buttons("Later", Gtk.ResponseType.CLOSE)
            if action == "reboot":
                dialog.add_buttons("Reboot the system", Gtk.ResponseType.OK)
                resp = dialog.run()
                if resp == Gtk.ResponseType.OK:
                    self._reboot()
                dialog.destroy()
            elif action == "logout":
                dialog.add_buttons("Log me out", Gtk.ResponseType.OK)
                resp = dialog.run()
                if resp == Gtk.ResponseType.OK:
                    self._logout()
                dialog.destroy()

    def _reboot(self) -> None:
        """Requests system reboot to logind via dbus"""
        login1_proxy = dbus.Interface(
            dbus.SystemBus().get_object(
                "org.freedesktop.login1", "/org/freedesktop/login1"
            ),
            dbus_interface="org.freedesktop.login1.Manager",
        )

        login1_proxy.Reboot(True)

    def _logout(self) -> None:
        """Requests user logout to logind via dbus"""
        session_proxy = dbus.Interface(
            dbus.SystemBus().get_object(
                "org.freedesktop.login1", "/org/freedesktop/login1/session/self"
            ),
            dbus_interface="org.freedesktop.login1.Session",
        )

        session_proxy.Terminate()

    def _build_dialog(self, msg: str) -> None:
        """Utility to quickly build a MessageDialog with a standard format"""
        dialog = Gtk.MessageDialog(
            destroy_with_parent=True,
            message_type=Gtk.MessageType.WARNING,
            text="asusctltray",
        )
        dialog.set_title("asusctltray")
        dialog.format_secondary_markup(msg)
        return dialog

    def _is_boost_enabled(self) -> bool:
        """Returns True if CPU turbo boost is enabled"""
        data = open(self.boost_ctrl["path"], "r").read()[:-1]
        return int(data) == 1

    @on_widget_active_strict
    def _enable_boost(self, widget: Gtk.MenuItem) -> None:
        """Enables boost if not already enabled"""
        if self._is_boost_enabled():
            return

        status = os.system(self.boost_ctrl["on"].format(path=self.boost_ctrl["path"]))
        if os.waitstatus_to_exitcode(status) != 0:
            widget.set_active(False)

    @on_widget_active_strict
    def _disable_boost(self, widget: Gtk.MenuItem) -> None:
        """Disables boost if not already disabled"""
        if not self._is_boost_enabled():
            return

        status = os.system(self.boost_ctrl["off"].format(path=self.boost_ctrl["path"]))
        if os.waitstatus_to_exitcode(status) != 0:
            widget.set_active(False)

    def setup_boost_menu(self, title: str) -> None:
        """Adds the boost submenu to the main menu"""
        group = []
        enable = Gtk.RadioMenuItem.new_with_label(group, label="Enabled")
        group = enable.get_group()

        disable = Gtk.RadioMenuItem.new_with_label(group, label="Disabled")
        group = disable.get_group()

        boost_enabled = self._is_boost_enabled()
        enable.set_active(boost_enabled)
        disable.set_active(not boost_enabled)

        enable.connect("activate", self._enable_boost)
        disable.connect("activate", self._disable_boost)

        bmenu = Gtk.Menu()
        bmenu.append(enable)
        bmenu.append(disable)

        bitem = Gtk.MenuItem()
        bitem.set_label(title)
        bitem.set_submenu(bmenu)

        self.menu.append(bitem)


if __name__ == "__main__":
    DBusGMainLoop(set_as_default=True)
    loop = GLib.MainLoop()
    TrayIcon(loop)
    loop.run()
