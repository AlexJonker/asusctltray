#!/usr/bin/env python3
import dbus
import json
import os
import signal

import gi
gi.require_version("Gtk", "3.0")
gi.require_version("AppIndicator3", "0.1")
from gi.repository import AppIndicator3 as appindicator
from gi.repository import Gtk, GLib, Gio

ASUSD_CONF = "/etc/asusd/asusd.conf"

ICON_BASE_PATH = "/usr/share/pixmaps"

class TrayIcon():
    config = None
    graphics_modes = ["nvidia", "hybrid", "compute", "integrated"]
    icon = None
    image_pixbuf = None
    presets = []
    
    def __init__ (self):
        self.icon = appindicator.Indicator.new("asusctltray", Gtk.STOCK_INFO, appindicator.IndicatorCategory.SYSTEM_SERVICES)
        self.icon.set_status(appindicator.IndicatorStatus.ACTIVE)
        self.build_menu()
        self.icon.set_menu(self.menu)
        self.icon.set_icon_theme_path(ICON_BASE_PATH)
        self.icon.set_icon_full("asusctltray", "")
        
    def build_menu(self):
        self.menu = Gtk.Menu()
        
        with open(ASUSD_CONF, "r") as file:
            self.config = json.load(file)
        self.presets = self.config["power_profiles"].keys()
        
        self.get_current_graphics()
        self.add_graphics("Graphics")
        self.menu.append(Gtk.SeparatorMenuItem())
        self.add_presets("Profiles")
        self.menu.append(Gtk.SeparatorMenuItem())
        
        qicon = Gtk.MenuItem()
        qicon.set_label("Quit StatusIcon")
        qicon.connect("activate", kill)
        self.menu.append(qicon)

        self.menu.show_all()
        
    def leftclick (self, icon):
        os.system("asusctl profile -n")
    
    def add_presets(self, title):
        if len(self.presets) == 0:
            return

        current_profile = self.config["active_profile"]

        titem = Gtk.MenuItem()
        titem.set_label(title)
        titem.set_sensitive(False)
        self.menu.append(titem)
        for p in self.presets:
            pitem = Gtk.RadioMenuItem()
            pitem.set_label(p)
            pitem.set_active(p == current_profile)
            pitem.connect("activate", self.load_preset)
            self.menu.append(pitem)
    
    def load_preset(self, widget):
        os.system("asusctl profile %s" % widget.get_label())

    def add_graphics(self, title):
        current_graphics = self.get_current_graphics()
        titem = Gtk.MenuItem()
        titem.set_label(title)
        titem.set_sensitive(False)
        self.menu.append(titem)
        for g in self.graphics_modes:
            gitem = Gtk.RadioMenuItem()
            gitem.set_label(g)
            gitem.set_active(g == current_graphics)
            gitem.connect("activate", self.switch_graphics)
            self.menu.append(gitem)

    def get_current_graphics(self):
        bus = Gio.bus_get_sync(Gio.BusType.SYSTEM, None)
        proxy: Gio.DBusProxy = Gio.DBusProxy.new_sync(
            bus, Gio.DBusProxyFlags.NONE, None,
            "org.asuslinux.Daemon", 
            "/org/asuslinux/Gfx",
            "org.asuslinux.Daemon", None)
        res = proxy.call_sync("Vendor", None, Gio.DBusCallFlags.NO_AUTO_START, 2000, None)
        return res.unpack()[0]

    # def get_current_graphics(self):
    #     bus = dbus.SystemBus()
    #     proxy = bus.get_object(
    #         "org.asuslinux.Daemon",
    #         "/org/asuslinux/Gfx"
    #     )
    #     # TODO: wait for signals?
    #     return proxy.Vendor(dbus_interface="org.asuslinux.Daemon")
    
    def switch_graphics(self, widget):
        dialog = Gtk.MessageDialog(
            destroy_with_parent=True,
            message_type=Gtk.MessageType.WARNING,
            buttons=Gtk.ButtonsType.OK_CANCEL,
            text="Graphics: %s" % widget.get_label()
        )
        dialog.format_secondary_text("Switching graphics could require logout/reboot. Proceed?")
        resp = dialog.run()
        if resp == Gtk.ResponseType.OK:
            os.system("asusctl graphics -f -m %s" % widget.get_label())
        else:
            dialog.destroy()

    def _dbus_switch_graphics():
        return
        
def kill(obj1, obj2 = False):
    Gtk.main_quit()
    
if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    signal.signal(signal.SIGINT, kill)
    TrayIcon()
    Gtk.main()
