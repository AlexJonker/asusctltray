#!/usr/bin/env python3

# Copyright (c) Leonardo Baldin
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import configparser
import json
import os
import signal
import subprocess

import dbus
import gi

gi.require_version("Gtk", "3.0")
gi.require_version("AppIndicator3", "0.1")
from gi.repository import AppIndicator3 as appindicator
from gi.repository import Gio, GLib, Gtk, GObject

from typing import Dict, List

ICON_BASE_PATH: str = "/usr/share/pixmaps"
GFX_CONF: str = "/etc/supergfxd.conf"
GFX_MODES: Dict[int, str] = {
    0: "nvidia",
    1: "integrated",
    2: "compute",
    3: "vfio",
    4: "hybrid",
}
GFX_USER_ACTION: Dict[int, str] = {
    0: "logout",
    1: "reboot",
    2: "integrated",
    3: "none",
}


class TrayIcon:
    gfx_config: Dict = None

    gfx_proxy: dbus.Interface = None
    power_profile_props_proxy: dbus.Interface = None
    presets: List[str] = []

    # Used to store original profile names for radio widgets
    raw_names: Dict[Gtk.RadioMenuItem, str] = {}

    # Holds the Indicator instance
    icon: appindicator.Indicator = None

    def __init__(self) -> None:
        with open(GFX_CONF, "r") as file:
            self.gfx_config = json.load(file)

        bus = dbus.SystemBus()
        self.gfx_proxy = dbus.Interface(
            bus.get_object("org.supergfxctl.Daemon", "/org/supergfxctl/Gfx"),
            dbus_interface="org.supergfxctl.Daemon",
        )
        self.power_profile_props_proxy = dbus.Interface(
            bus.get_object("net.hadess.PowerProfiles", "/net/hadess/PowerProfiles"),
            dbus_interface=dbus.PROPERTIES_IFACE,
        )

        # TODO: asusctl profiles and ppd profiles are differentz
        self.presets = [
            str(p["Profile"])
            for p in self.power_profile_props_proxy.Get(
                "net.hadess.PowerProfiles", "Profiles"
            )
        ]

        self.icon = appindicator.Indicator.new(
            "asusctltray",
            Gtk.STOCK_INFO,
            appindicator.IndicatorCategory.SYSTEM_SERVICES,
        )
        self.icon.set_status(appindicator.IndicatorStatus.ACTIVE)
        self.build_menu()
        self.icon.set_menu(self.menu)
        self.icon.set_icon_theme_path(ICON_BASE_PATH)
        self.icon.set_icon_full("asusctltray", "")

    def build_menu(self) -> None:
        """Create and populate the main menu for the tray icon"""
        self.menu = Gtk.Menu()

        self.add_graphics("Graphics")
        self.menu.append(Gtk.SeparatorMenuItem())
        self.add_presets("Power profiles")
        self.menu.append(Gtk.SeparatorMenuItem())
        self.setup_boost_menu("Boost")
        self.menu.append(Gtk.SeparatorMenuItem())

        qicon = Gtk.MenuItem()
        qicon.set_label("Quit asusctltray")
        qicon.connect("activate", Gtk.main_quit)
        self.menu.append(qicon)

        self.menu.show_all()

    def _humanize(self, s: str) -> str:
        """Humanize profile name, e.g. 'power-saver' -> 'Power saver'"""
        return s.replace("-", " ").capitalize()

    def add_presets(self, title: str) -> None:
        """Load power profiles and add a RadioMenuItem for each to the menu"""
        if len(self.presets) == 0:
            return

        current_profile = self.power_profile_props_proxy.Get(
            "net.hadess.PowerProfiles", "ActiveProfile"
        )

        titem = Gtk.MenuItem()
        titem.set_label(title)
        titem.set_sensitive(False)
        self.menu.append(titem)

        group = []
        for p in self.presets:
            pitem = Gtk.RadioMenuItem.new_with_label(
                group=group, label=self._humanize(p)
            )
            self.raw_names[pitem] = p
            pitem.set_active(p == current_profile)

            pitem.connect("activate", self.load_preset)
            group = pitem.get_group()
            self.menu.append(pitem)

    def load_preset(self, widget: Gtk.MenuItem) -> None:
        """Activate a power profile, called when a RadioMenuItem is activated"""
        # This is called when the widget is deselected too, so check if active
        if not widget.get_active():
            return

        # TODO: use signals when they're actually implemented by asusctl
        self.power_profile_props_proxy.Set(
            "net.hadess.PowerProfiles",
            "ActiveProfile",
            self.raw_names[widget],
        )

    def add_graphics(self, title: str) -> None:
        """Load graphics modes and add a RadioMenuItem for each to the menu"""
        current_graphics = self.get_current_graphics()

        titem = Gtk.MenuItem()
        titem.set_label(title)
        titem.set_sensitive(False)
        self.menu.append(titem)
        group = []
        for g in GFX_MODES.values():
            # Skip if vfio is disabled in configuration
            if not self.gfx_config["gfx_vfio_enable"] and g == "vfio":
                continue
            gitem = Gtk.RadioMenuItem.new_with_label(group, g)
            group = gitem.get_group()
            gitem.set_active(g == current_graphics)
            gitem.connect("activate", self.switch_graphics)
            self.menu.append(gitem)

    def get_current_graphics(self) -> str:
        """Returns the currently active graphics mode"""
        vendor = self.gfx_proxy.Vendor()
        return GFX_MODES[vendor]

    def switch_graphics(self, widget: Gtk.MenuItem) -> None:
        """Activate a graphics mode, called when a RadioMenuItem is activated"""
        # This is called when the widget is deselected too, so check if active
        if not widget.get_active():
            return

        # Return if the currently active profile is already selected in the menu
        if self.get_current_graphics() == widget.get_label():
            return

        # NOTE: will probably be possible via dbus in the future
        mode_ind = [k for (k, v) in GFX_MODES.items() if v == widget.get_label()][0]
        action_ind = self.gfx_proxy.SetVendor(mode_ind)
        action = GFX_USER_ACTION[action_ind]
        if action == "integrated":
            dialog = self._build_dialog(
                "You must switch to Integrated mode before switching to Compute or VFIO."
            )
            dialog.run()
            dialog.destroy()
        elif action != "none":
            dialog = self._build_dialog(
                f"Graphics changed to {widget.get_label()}. A {action} is required (save your files!)."
            )
            dialog.add_buttons("Later", Gtk.ResponseType.CLOSE)
            if action == "reboot":
                dialog.add_buttons("Reboot the system", Gtk.ResponseType.OK)
                resp = dialog.run()
                if resp == Gtk.ResponseType.OK:
                    os.system("systemctl reboot")
                dialog.destroy()
            elif action == "logout":
                dialog.add_buttons("Log me out", Gtk.ResponseType.OK)
                resp = dialog.run()
                if resp == Gtk.ResponseType.OK:
                    res = subprocess.run(
                        ["loginctl", "session-status", "--no-pager"],
                        stdout=subprocess.PIPE,
                    )
                    session_n = res.stdout.decode("utf-8").split(" ")[0]
                    os.system(f"loginctl terminate-session {session_n}")
                dialog.destroy()

    def _build_dialog(self, msg: str) -> None:
        """Utility to quickly build a MessageDialog with a standard format"""
        dialog = Gtk.MessageDialog(
            destroy_with_parent=True,
            message_type=Gtk.MessageType.WARNING,
            text="asusctltray",
        )
        dialog.format_secondary_text(msg)
        return dialog

    def _is_boost_enabled(self) -> bool:
        """Returns True if CPU turbo boost is enabled"""
        data = open("/sys/devices/system/cpu/cpufreq/boost", "r").read()[:-1]
        return int(data) == 1

    def _enable_boost(self, widget: Gtk.MenuItem) -> None:
        """Enables boost if not already enabled"""
        # This is called when the widget is deselected too, so check if active
        if not widget.get_active():
            return
        if widget.get_active() == self._is_boost_enabled():
            return

        os.system("echo 1 | pkexec tee /sys/devices/system/cpu/cpufreq/boost")

    def _disable_boost(self, widget: Gtk.MenuItem) -> None:
        """Disables boost if not already disabled"""
        # This is called when the widget is deselected too, so check if active
        if not widget.get_active():
            return
        if widget.get_active() != self._is_boost_enabled():
            return

        os.system("echo 0 | pkexec tee /sys/devices/system/cpu/cpufreq/boost")

    def setup_boost_menu(self, title: str) -> None:
        """Adds the boost submenu to the main menu"""
        group = []
        enable = Gtk.RadioMenuItem.new_with_label(group, label="Enabled")
        group = enable.get_group()

        disable = Gtk.RadioMenuItem.new_with_label(group, label="Disabled")
        group = disable.get_group()

        boost_enabled = self._is_boost_enabled()
        enable.set_active(boost_enabled)
        disable.set_active(not boost_enabled)

        enable.connect("activate", self._enable_boost)
        disable.connect("activate", self._disable_boost)

        bmenu = Gtk.Menu()
        bmenu.append(enable)
        bmenu.append(disable)

        bitem = Gtk.MenuItem()
        bitem.set_label(title)
        bitem.set_submenu(bmenu)

        self.menu.append(bitem)


if __name__ == "__main__":
    signal.signal(signal.SIGINT, Gtk.main_quit)
    TrayIcon()
    Gtk.main()
