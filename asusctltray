#!/usr/bin/env python3
import dbus
import json
import os
import signal
import subprocess

import gi

gi.require_version("Gtk", "3.0")
gi.require_version("AppIndicator3", "0.1")
from gi.repository import AppIndicator3 as appindicator
from gi.repository import Gtk, GLib, Gio

ASUSD_CONF = "/etc/asusd/asusd.conf"
ICON_BASE_PATH = "/usr/share/pixmaps"
GFX_MODES = {
    0: "nvidia",
    1: "integrated",
    2: "compute",
    3: "vfio",
    4: "hybrid",
}
GFX_USER_ACTION = {
    0: "logout",
    1: "reboot",
    2: "integrated",
    3: "none",
}


class TrayIcon:
    config = None
    gfx_proxy = None
    icon = None
    image_pixbuf = None
    presets = []

    def __init__(self):
        with open(ASUSD_CONF, "r") as file:
            self.config = json.load(file)
        self.presets = self.config["power_profiles"].keys()

        bus = dbus.SystemBus()
        real_proxy = bus.get_object("org.asuslinux.Daemon", "/org/asuslinux/Gfx")
        self.gfx_proxy = dbus.Interface(real_proxy, dbus_interface="org.asuslinux.Daemon")

        self.icon = appindicator.Indicator.new(
            "asusctltray",
            Gtk.STOCK_INFO,
            appindicator.IndicatorCategory.SYSTEM_SERVICES,
        )
        self.icon.set_status(appindicator.IndicatorStatus.ACTIVE)
        self.build_menu()
        self.icon.set_menu(self.menu)
        self.icon.set_icon_theme_path(ICON_BASE_PATH)
        self.icon.set_icon_full("asusctltray", "")

    def build_menu(self):
        self.menu = Gtk.Menu()

        self.add_graphics("Graphics")
        self.menu.append(Gtk.SeparatorMenuItem())
        self.add_presets("Profiles")
        self.menu.append(Gtk.SeparatorMenuItem())

        qicon = Gtk.MenuItem()
        qicon.set_label("Quit asusctltray")
        qicon.connect("activate", kill)
        self.menu.append(qicon)

        self.menu.show_all()

    def add_presets(self, title):
        if len(self.presets) == 0:
            return

        current_profile = self.config["active_profile"]

        titem = Gtk.MenuItem()
        titem.set_label(title)
        titem.set_sensitive(False)
        self.menu.append(titem)
        group = []
        for p in self.presets:
            pitem = Gtk.RadioMenuItem.new_with_label(group, p)
            group = pitem.get_group()
            pitem.set_active(p == current_profile)
            pitem.connect("activate", self.load_preset)
            self.menu.append(pitem)

    def load_preset(self, widget):
        # This is called when the widget is deselected too, so check if active
        if widget.get_active():
            os.system("asusctl profile %s" % widget.get_label())

    def add_graphics(self, title):
        current_graphics = self.get_current_graphics()

        titem = Gtk.MenuItem()
        titem.set_label(title)
        titem.set_sensitive(False)
        self.menu.append(titem)
        group = []
        for g in GFX_MODES.values():
            # Skip if vfio is disabled in configuration
            if not self.config["gfx_vfio_enable"] and g == "vfio":
                continue
            gitem = Gtk.RadioMenuItem.new_with_label(group, g)
            group = gitem.get_group()
            gitem.set_active(g == current_graphics)
            gitem.connect("activate", self.switch_graphics_dbus)
            self.menu.append(gitem)

    def get_current_graphics(self):
        vendor = self.gfx_proxy.Vendor()
        return GFX_MODES[vendor]

    def switch_graphics(self, widget):
        # This is called when the widget is deselected too, so check if active
        if not widget.get_active():
            return
        dialog = Gtk.MessageDialog(
            destroy_with_parent=True,
            message_type=Gtk.MessageType.WARNING,
            buttons=Gtk.ButtonsType.OK,
            text="Graphics: %s" % widget.get_label(),
        )
        dialog.format_secondary_text(
            "Switching graphics could require logout/reboot. Proceed?"
        )
        resp = dialog.run()
        if resp == Gtk.ResponseType.OK:
            os.system("asusctl graphics -f -m %s" % widget.get_label())
        else:
            dialog.destroy()

    def switch_graphics_dbus(self, widget):
        # This is called when the widget is deselected too, so check if active
        if not widget.get_active():
            return

        if self.get_current_graphics() == widget.get_label():
            return
        
        mode_ind = [k for (k, v) in GFX_MODES.items() if v == widget.get_label()][0]
        action_ind = self.gfx_proxy.SetVendor(mode_ind)
        action = GFX_USER_ACTION[action_ind]
        if action == "integrated":
            self.run_dialog("You must switch to Integrated mode before switching to Compute or VFIO.")
        elif action != "none":
            self.run_dialog(f"Graphics changed to {widget.get_label()}. A {action} is required (save your files!).")
            if action == "reboot":
                os.system("systemctl reboot")
            elif action == "logout":
                res = subprocess.run(["loginctl", "session-status", "--no-pager"], stdout=subprocess.PIPE)
                session_n = res.stdout.decode("utf-8").split(" ")[0]
                os.system(f"loginctl terminate-session {session_n}")

    def run_dialog(self, msg, btn_text="Do it!"):
        dialog = Gtk.MessageDialog(
            destroy_with_parent=True,
            message_type=Gtk.MessageType.WARNING,
            text="asusctltray",
        )
        dialog.add_buttons(btn_text, Gtk.ResponseType.CLOSE)
        dialog.format_secondary_text(msg)
        dialog.run()
        dialog.destroy()


def kill(obj1, obj2=False):
    Gtk.main_quit()


if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    signal.signal(signal.SIGINT, kill)
    TrayIcon()
    Gtk.main()
